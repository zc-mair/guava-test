package com.zc.guava.day01;

import com.google.common.collect.BoundType;
import com.google.common.collect.Range;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;


/**
 * RangeTest Tester.
 *
 * @author zhangchao
 * @since <pre>5.8.2018</pre>
 * @version 1.0
 * @describe   ????????????????????????????????????????????????a<=b<=c, range.contains(a)?range.contains(c)???range.contains(b)?
 *              ?????????????????x>3???????3???????????????? 2<=x<5??Guava???????????
 */
public class RangeTest {

    @Before
    public void before() throws Exception {
    }

    @After
    public void after() throws Exception {
    }

    @Test
    public void testRange() throws Exception {
        /**
         * ?????????????????
         */
        //1.????
        Range.closed(1,10);//????[1,10]
        Range.open(1,10);//????(1,10)
        Range.closedOpen(1,10);//???????[1,10)
        Range.openClosed(1,10);//??????1,10]
        Range.lessThan(10.0);//????10?doulbe??(-?..10)
        Range.downTo(1, BoundType.OPEN);// ??????(1..+?)
        /**
         * 2.????
         */
        //2.1 contains :????????
//        boolean result =Range.closed(1,10).contains(10);
//        assertFalse(result);
        //2.2 ?????
                //Range????????? ????????
                        // hasLowerBound()?hasUpperBound()???????????????????
                        // lowerBoundType()?upperBoundType()??????????CLOSED?OPEN???????????????IllegalStateException?
                        // lowerEndpoint()?upperEndpoint()????????????????????????IllegalStateException?
                        // isEmpty()??????????
        Range range =Range.closed(1,10);
        assertEquals(true,range.hasLowerBound());
        assertEquals(BoundType.CLOSED,range.lowerBoundType());
        assertEquals(1,range.lowerEndpoint());
        //2.3 ????: ??? ???????????
                          //1.?? :???????????
                          //2.Range.isConnected(Range)??????????
                          //3.Range.intersection(Range)????????????????????????????????????????????????????????????????????????IllegalArgumentException?
                          //4.Range.span(Range)????????????????????????????????????
        assertEquals(true,Range.closed(3,5).isConnected(Range.open(5,10)));
        assertEquals(false,Range.open(3,5).isConnected(Range.open(5,10)));//(3,5)?(5,10)???
        assertEquals(true,Range.closed(0,5).isConnected(Range.open(1,9)));

        Range a = Range.closed(3,5);
        Range b = Range.open(5,10);
        System.out.println(a.intersection(b));//(5?5]
        Range c = Range.closed(5,10);
        System.out.println(a.intersection(c));//[5?5]
        Range d = Range.open(3,5);
//        System.out.println(b.intersection(d));//java.lang.IllegalArgumentException: Invalid range: (5?5)

        System.out.println(Range.closed(0, 9).span(Range.closed(3, 4)););

    }
}


